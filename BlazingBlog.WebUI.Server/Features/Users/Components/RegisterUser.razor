@page "/register"
@using BlazingBlog.Application.Users.RegisterUser

@inject ISender Sender
@inject NavigationManager NavigationManager


<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
    <div class="col-lg-6">
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="HandleSubmit" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.UserName" id="Input.UserName" class="form-control" autocomplete="username" aria-required="true" placeholder="username" />
                <label for="Input.UserName">Username</label>
                <ValidationMessage For="() => Input.UserName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="useremail" aria-required="true" placeholder="name@example.com" />
                <label for="Input.Email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="Input.Password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="Input.ConfirmPassword">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
</div>


@code {

    [SupplyParameterFromForm]
    private RegisterUserModel Input { get; set; } = new();
    private string errorMessage = string.Empty;

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    async Task HandleSubmit()
    {
        var command = new RegisterUserCommand
            {
                UserEmail = Input.Email,
                UserName = Input.UserName,
                Password = Input.Password
            };
        var result = await Sender.Send(command);
        if (result.Success)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            errorMessage = $"Error: {result.Error}";
        }
    }

}
