@page "/article-editor"
@page "/article-editor/{ArticleId:int}"
@using BlazingBlog.Application.Articles.DeleteArticle
@using BlazingBlog.Infrastructure.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject ISender Sender
@inject NavigationManager NavManager
@attribute [Authorize]
@inject UserManager<User> UserManager

@if (isEditMode && Article is not null)
{
    <PageTitle>Edit Article @Article.Title</PageTitle>
    <h3>Edit Article "@Article.Title" by @Article.UserName</h3>
}
else
{
    <PageTitle>Create New Article</PageTitle>
    <h3>Create New Article</h3>
}

@if (Article is not null)
{
    <EditForm Model="Article" OnSubmit="HandleSubmit" FormName="ArticleEditor">
        <p>
            <InputText class="form-control" @bind-Value="Article.Title" placeholder="Enter the Title" />
        </p>
        <p>
            <InputTextArea class="form-control" @bind-Value="Article.Content" placeholder="Enter your Content" />
        </p>
        <p>
            <InputDate class="form-control" Type="InputDateType.DateTimeLocal" @bind-Value="Article.DatePublished" />
        </p>
        <div>
            <p>
                <InputCheckbox class="form-check-input" @bind-Value="Article.IsPublished" />
                <label class="form-check-label">Is Published</label>
            </p>
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
    if (isEditMode)
    {
        <p>
            <form @onsubmit="DeleteArticle" @formname="DeleteArticleForm" method="post">
                <button class="btn btn-danger">Delete</button>
                <AntiforgeryToken />
            </form>
        </p>
    }
}

<span class="text-danger">@errorMessage</span>

@code {
    private bool isEditMode => ArticleId != null;
    private string errorMessage = string.Empty;
    [SupplyParameterFromForm]
    ArticleModel? Article { get; set; }

    [Parameter]
    public int? ArticleId { get; set; }

    [CascadingParameter]
    public HttpContext context { get; set; } = default;

    protected override async Task OnParametersSetAsync()
    {
        if (ArticleId is not null)
        {
            var result = await Sender.Send(
                new GetArticleByIdQuery { Id = (int)ArticleId }
            );

            if (result.Success)
            {
                // we will change this later...
                Article ??= result.Value.Adapt<ArticleModel>();
                Article.Id = (int)ArticleId;
            }
            else
            {
                SetErrorMessage(result.Error);
            }
        }
        else
        {
            // ??=  Only sets it if it is null
            Article ??= new();
        }
    }


    async Task HandleSubmit()
    {
        if (isEditMode)
        {
            var command = Article.Adapt<UpdateArticleCommand>();
            var result = await Sender.Send(command);
            if (result.Success)
            {
                Article = result.Value.Adapt<ArticleModel>();
            }
            else
            {
                SetErrorMessage(result.Error);
            }
        }
        else
        {
            var command = Article.Adapt<CreateArticleCommand>();
            command.UserId = UserManager.GetUserId(context.User);

            var result = await Sender.Send(command);
            if (result.Success)
            {
                NavManager.NavigateTo($"/article-editor/{result.Value.Id}");
            }
            else
            {
                SetErrorMessage(result.Error);
            }
        }
    }

    async Task DeleteArticle()
    {
        if (ArticleId is null)
        {
            return;
        }

        var command = new DeleteArticleCommand
            {
                Id = (int)ArticleId
            };

        var result = await Sender.Send(command);
        if (result.Success)
        {
            NavManager.NavigateTo("/");
        }
        else
        {
            SetErrorMessage(result.Error);
        }
    }

    void SetErrorMessage(string? error)
    {
        errorMessage = error ?? string.Empty;
    }
}

