@page "/article-editor"
@page "/article-editor/{ArticleId:int}"
@using BlazingBlog.Application.Articles.DeleteArticle

@inject ISender Sender
@inject NavigationManager NavManager


@if (isEditMode && Article is not null)
{
    <PageTitle>Edit Article @Article.Title</PageTitle>
    <h2 class="text-2xl font-extrabold text-gray-100">Edit Article @Article.Title</h2>
}
else
{
    <PageTitle>Create New Article</PageTitle>
    <h2 class="text-2xl font-extrabold text-gray-100">Create New Article</h2>
}
<div class="space-y-4">
    @if (Article is not null)
    {
        <EditForm Model="Article" OnSubmit="HandleSubmit" FormName="ArticleEditor" class="space-y-6 my-4">
            <div>
                <label for="title" class="text-sm">Title</label>
                <InputText id="title" class="w-full p-3 rounded border-1 bg-gray-800" @bind-Value="Article.Title" />
            </div>
            <div>
                <label for="content" class="text-sm">Content</label>
                <InputTextArea id="content" class="w-full p-3 rounded border-1 bg-gray-800" @bind-Value="Article.Content" />
            </div>
            <div>
                <label for="datepublished" class="text-sm">Date Published</label>
                <InputDate id="datepublished" class="w-full p-3 rounded border-1 bg-gray-800" @bind-Value="Article.DatePublished" />
            </div>
            <div class="form-check">
                <InputCheckbox id="ispublished" class="form-check-input checked:bg-blue-400" @bind-Value="Article.IsPublished" />
                <label for="ispublished">Is Published</label>
                <p></p>
            </div>
            <div>
                <button type="submit" class="w-full p-3 text-sm font-bold tracking-wide uppercase rounded bg-blue-600 text-gray-900">Submit</button>
            </div>
        </EditForm>

        if (isEditMode)
        {            
            <p>
                <h2 class="text-2xl font-extrabold text-gray-100">Danger zone</h2>
                <form @onsubmit="DeleteArticle" @formname="DeleteArticleForm" method="post" class="my-4">
                    <button class="p-3 text-sm font-bold tracking-wide uppercase rounded bg-red-400 text-gray-900">Delete</button>
                    <AntiforgeryToken />
                </form>
            </p>
        }
    }

    <span class="text-danger">@errorMessage</span>
</div>


@code {
    private bool isEditMode => ArticleId != null;
    private string errorMessage = string.Empty;
    [SupplyParameterFromForm]
    ArticleModel? Article { get; set; }

    [Parameter]
    public int? ArticleId { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        if (ArticleId is not null)
        {
            var result = await Sender.Send(
                new GetArticleByIdQuery { Id = (int)ArticleId }
            );

            if (result.Success)
            {
                // we will change this later...
                Article ??= result.Value.Adapt<ArticleModel>();
                Article.Id = (int)ArticleId;
            }
            else
            {
                SetErrorMessage(result.Error);
            }
        }
        else
        {
            // ??=  Only sets it if it is null
            Article ??= new();
        }
    }


    async Task HandleSubmit()
    {
        if (isEditMode)
        {
            var command = Article.Adapt<UpdateArticleCommand>();
            var result = await Sender.Send(command);
            if (result.Success)
            {
                Article = result.Value.Adapt<ArticleModel>();
            }
            else
            {
                SetErrorMessage(result.Error);
            }
        }
        else
        {
            var command = Article.Adapt<CreateArticleCommand>();
            var result = await Sender.Send(command);
            if (result.Success)
            {
                NavManager.NavigateTo($"/article-editor/{result.Value.Id}");
            }
            else
            {
                SetErrorMessage(result.Error);
            }
        }
    }

    async Task DeleteArticle()
    {
        if (ArticleId is null)
        {
            return;
        }

        var command = new DeleteArticleCommand
            {
                Id = (int)ArticleId
            };

        var result = await Sender.Send(command);
        if (result.Success)
        {
            NavManager.NavigateTo("/articles");
        }
        else
        {
            SetErrorMessage(result.Error);
        }
    }

    void SetErrorMessage(string? error)
    {
        errorMessage = error ?? string.Empty;
    }
}

